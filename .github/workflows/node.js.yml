# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: forge-sql-orm CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    environment: forge-sql-orm
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Download Code Climate test reporter
      run: |
        curl -Ls https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 -o cc-test-reporter
        chmod +x cc-test-reporter
        mv cc-test-reporter /usr/local/bin/

    - name: Code Climate before-build
      run: cc-test-reporter before-build
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run lint
    - run: npm run build
    - run: npm test
    - run: npm run test:coverage
    - name: Upload to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage/lcov.info
    - name: Upload coverage to Code Climate
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.json
        cc-test-reporter upload-coverage -i coverage/codeclimate.json
    - name: Upload to Qlty
      uses: qltysh/qlty-action/coverage@main
      with:
        coverage-token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
        files: ./coverage/lcov.info
    - run: echo BUILD CLI
    - run: cd forge-sql-orm-cli && npm ci
    - run: cd forge-sql-orm-cli && npm run lint
    - run: cd forge-sql-orm-cli && npm run build
    - run: echo BUILD EXAMPLES
    - run: cd examples/forge-sql-orm-example-dynamic && npm i
    - run: cd examples/forge-sql-orm-example-dynamic/static/forge-orm-example && npm i
    - run: cd examples/forge-sql-orm-example-dynamic/static/forge-orm-example && npm run build
    - run: cd examples/forge-sql-orm-example-drizzle-driver-simple && npm i
    - run: cd examples/forge-sql-orm-example-drizzle-driver-simple/static/forge-orm-example && npm i
    - run: cd examples/forge-sql-orm-example-drizzle-driver-simple/static/forge-orm-example && npm run build
    - run: cd examples/forge-sql-orm-example-simple && npm i
    - run: cd examples/forge-sql-orm-example-simple/static/forge-orm-example && npm i
    - run: cd examples/forge-sql-orm-example-simple/static/forge-orm-example && npm run build
    - run: cd examples/forge-sql-orm-example-optimistic-locking && npm i
    - run: cd examples/forge-sql-orm-example-optimistic-locking/static/forge-orm-example && npm i
    - run: cd examples/forge-sql-orm-example-optimistic-locking/static/forge-orm-example && npm run build
